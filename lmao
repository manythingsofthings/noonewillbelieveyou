local toggle = true
if toggle == false then return end

-- initial setup
local rep     = game:GetService("ReplicatedStorage")
local repFir  = game:GetService("ReplicatedFirst")
local plr     = game:GetService("Players").LocalPlayer
local ME      = rep.Events.ME
local styles  = rep.Styles
local rush    = styles.Rush
local brawler = styles.Brawler
local beast   = styles.Beast
local moves   = rep.Moves
local char    = plr.Character
local hrp     = char.HumanoidRootPart
local pgui    = plr.PlayerGui
local status  = plr.Status
local interf  = pgui.Interface
local Main    = interf.Battle.Main
local cas     = game:GetService("ContextActionService")
local uis     = game:GetService("UserInputService")
local rs      = game:GetService("RunService")

local humanoidRootPart = char.HumanoidRootPart
local humanoid         = char.Humanoid
local animator         = humanoid.Animator

local function isInBattle()
	return (plr:FindFirstChild("InBattle") and true or false)
end

-- oh boy
--notification event
local function sendNotification(text, color, stroke, sound)
	local upper = string.upper(text)
	-- Fire the notification event
	if sound then
		pgui["Notify"]:Fire(text, sound)
	else
		pgui["Notify"]:Fire(text)
	end
	-- If color is not provided, default to white
	if not color then
		color = Color3.new(1, 1, 1)
	end

	if not stroke then
		stroke = Color3.new(0, 0, 0)
	end

	-- Listen for when a new child is added to NotifyUI.Awards
	for i, v in ipairs(pgui.NotifyUI.Awards:GetChildren()) do
		if v.Name == "XPEx" and v.Text == upper then
			v.Text             = text
			v.TextColor3       = color
			v.TextStrokeColor3 = stroke
			v.Text = text
			if v.Text == "Feel the HEAT!!" then
				v.Font = Enum.Font.PermanentMarker
			end
		end
	end
end

if not hookmetamethod and not getnamecallmethod then sendNotification("executor not supported sorr,gy", Color3.new(1, 1, 1), Color3.new(0, 0, 0), "buzz") return end

local function depleteHeat(howmany)
	for i = 1, howmany , 1 do
		local A_2 = {
			[1] = {
				[1] = "evade",
				[3] = false,
				[4] = true
			}
		}
		ME:FireServer(unpack(A_2))
	end
end

function checkArgs(args)
	if status.Settings.Difficulty.Value ~= "Legend" then return args end
	if typeof(args[1]) == "table" then
		if args[1][1] == "damage" then
			if args[1][3] == hrp then
				if string.find(args[1][5].Name, "Strike") or string.find(args[1][5].Name, "kPunch") then
					if string.find(args[1][5].Name, "Strike1") or string.find(args[1][5].Name, "Stomp") then return args end
					args[1][5] = moves["HueDrop"]
				elseif args[1][5] == moves.HueDrop or args[1][5] == moves.GoAway then
					args[1][5] = moves["TigerDrop"]
				elseif args[1][5] == moves.ParkerDrop or args[1][5] == moves.DerekCharge then
					args[1][5] = moves["龍TigerDrop"]
				elseif args[1][5] == moves["龍TigerDrop"] then
					args[1][5] = moves["龍GTigerDrop"]
				elseif string.find(args[1][5].Name, "GStrike") then
					args[1][5] = moves["BTStrike3"]
				elseif not string.find(args[1][5].Name, "P_") and not string.find(args[1][5].Name, "Prop") and not string.find(args[1][5].Name, "MA") and not string.find(args[1][5].Name, "MM") and not string.find(args[1][5].Name, "MS") then
					args[1][5] = moves["BTPunch1"]
				end
			else
				if not string.find(args[1][5].Name, "P_") and not string.find(args[1][5].Name, "Prop") and not string.find(args[1][5].Name, "MA") and not string.find(args[1][5].Name, "MM") and not string.find(args[1][5].Name, "MS") then
					if string.find(args[1][5].Name, "Attack") or string.find(args[1][5].Name, "Strike1") then
						args[1][5] = moves["RStrike1"]
					elseif string.find(args[1][5].Name, "Strike") then
						args[1][5] = moves["RStrike2"]
					elseif string.find(args[1][5].Name, "Drop") or string.find(args[1][5].Name, "Hook") then
						if args[1][3].Parent.Name == "Legendary Dragon" then return args end
						args[1][5] = moves["BStrike4"]
					end
				end
			end
		end
	end
	return args
end

local processingEvent = false

local originalNamecall
originalNamecall = hookmetamethod(game, "__namecall", function(self, ...)
	local method = getnamecallmethod()
	local args   = {
  		...
	}
	if self == ME and method:lower() == "fireserver" and typeof(args[1]) == "table" then
		if processingEvent then
			return originalNamecall(self, unpack(args)) -- Avoid reprocessing modified events
		end
		processingEvent = true
		args = checkArgs(args)
		processingEvent = false
	end
	return originalNamecall(self, unpack(args))
end)

-- no drop iframes
for _, move in pairs (moves:GetChildren()) do
	if string.find(move.Name, "Drop") or string.find(move.Name, "Hook") then
		if move:FindFirstChild("Invulnerable") then
			move.Invulnerable:Destroy()
		end
	end
end

-- heat drain
status.CurrentMove.Changed:Connect(function()
	if status.Settings.Difficulty.Value ~= "Legend" then return end
	if string.find(status.CurrentMove.Value.Name, "2Strike") then
		depleteHeat(4)
	end
end)

local function fiveSecDrain()
	while true do
		if isInBattle() and status.Settings.Difficulty.Value == "Legend" then
			depleteHeat(1)
		end
		task.wait(3)
	end
end

task.spawn(fiveSecDrain)

-- misc
local perfCl = interf.Perf2:Clone()
perfCl.Parent = interf
perfCl.Name = "perfCl"

interf.Perf2.TextTransparency = 1

local function changeShit()
	perfCl.Text = "Difficulty: " .. status.Settings.Difficulty.Value
	if status.Settings.Difficulty.Value == "Legend" then
		perfCl.Text = "Difficulty: Lunatic"
		pgui.MenuUI.Menu.Settings.Frame.Difficulty.Difficulty.Text = "LUNATIC"
	end
end
changeShit()

interf.Perf2.Changed:Connect(changeShit)
status.Settings.Difficulty.Changed:Connect(changeShit)
pgui.MenuUI.Menu.Settings.Frame.Difficulty.Difficulty.Changed:Connect(changeShit)
